name: NodeJS CI
on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  #
  # Job
  #
  build_and_test:

    concurrency:
      group: commit_stage
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Set git user name
      run: git config user.name "${{ github.actor }}"
      env:
        GITHUB_TOKEN: ${{ secrets.USER_TOKEN }}

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Read Version from package.json
      id: read-version
      run: |
        version=$(node -pe "require('./package.json').version.match(/^\d+\.\d+/)[0]")        
        echo "version=$version" >> $GITHUB_OUTPUT
    
    - name: Find and Replace version in app-data.js
      run: |
        version=$(echo "${{ steps.read-version.outputs.version }}")
        run_number=${{ github.run_number }}
        sed -i "s/version: \"x.x.x\"/version: \"$version.$run_number-RC\"/g" ./bin/app-data.js

    - name: Read New Version from app-data.js
      run: |
        new_version=$(node -e "console.log(require('./bin/app-data.js').appData.version)")
        echo "new_version=$new_version" >> $GITHUB_ENV

    - name: New Version 
      run: |
        echo "The new version is $new_version"
        
    - name: Commit Stage Tests (linter)
      run: npm run lint

    - name: Commit Stage Tests (unit tests)
      run: npm run test:commit
            
    - name: Show GitHub context   
      env: 
        GITHUB_CONTEXT: ${{ toJson(github) }}   
      run: echo "$GITHUB_CONTEXT"
      shell: bash
            
    - name: Upload Binaries as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: rc-${{ github.run_number }}-binaries
        path: |
          ./
        
    - name: Tag Source Files for Release Candidate
      run: git tag -a "rc-${{ github.run_number }}" -m "Build tag for rc-${{ github.run_number }}"
      env:
        GITHUB_TOKEN: ${{ secrets.USER_TOKEN }}
        
    - name: Push Tags
      run: git push origin --tags
      env:
        GITHUB_TOKEN: ${{ secrets.USER_TOKEN }}
  #
  # Job
  #      
  merge_to_main:
    needs: build_and_test
    concurrency:
      group: commit_stage

    runs-on: ubuntu-latest

    steps:
    - name: Merge to main trunk 
      run: |
        GITHUB_TOKEN="${{ secrets.USER_TOKEN }}"
        API_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/merge"
        curl -X PUT -H "Authorization: Bearer $GITHUB_TOKEN" "$API_URL"
        
    - name: Delete the branch after merge 
      run: |        
        GITHUB_TOKEN="${{ secrets.USER_TOKEN }}"
        DELETE_BRANCH_API_URL="https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ github.head_ref }}"
        curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" "$DELETE_BRANCH_API_URL"
        
    #- name: Fetch The Binaries For The RC Debugging
    #  uses: actions/download-artifact@v4
    #  with:
    #    name: rc-${{ github.run_number }}-binaries
    #    github-token: ${{ secrets.USER_TOKEN }}
