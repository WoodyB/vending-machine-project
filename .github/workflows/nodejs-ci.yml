name: NodeJS Continuous Integration
on:
  pull_request:
    branches: [ "main" ]
env:
  GIT_USER: "${{ github.actor }}"
  
permissions:
  contents: write

jobs:
  build_and_test:

    concurrency:
      group: commit_stage
    runs-on: ubuntu-latest

    steps:
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 20
    
    - uses: actions/checkout@v4

    #git config user.name "${{ github.actor }}"
    - name: Set git user name
      run: |
        git config user.name "Fairbanks"
        git config user.email "wbeverleyaws@gmail.com"
      env:
        GITHUB_TOKEN: ${{ secrets.USER_TOKEN }}

    - name: Show git config information
      run: |
        git config --list > git-info.txt
        cat git-info.txt

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Read Version From package.json
      id: read-version
      run: |
        version=$(node -pe "require('./package.json').version.match(/^\d+\.\d+/)[0]")        
        echo "version=$version" >> $GITHUB_OUTPUT
    
    - name: Find And Replace Version In app-data.js
      run: |
        version=$(echo "${{ steps.read-version.outputs.version }}")
        run_number=${{ github.run_number }}
        sed -i "s/version: \"x.x.x\"/version: \"$version.$run_number-RC\"/g" ./bin/app-data.js

    - name: Read New Version From app-data.js
      run: |
        new_version=$(node -e "console.log(require('./bin/app-data.js').appData.version)")
        echo "new_version=$new_version" >> $GITHUB_ENV

    - name: New Version 
      run: |
        echo "The new version is $new_version"
        
    - name: Run Commit Stage Tests (linter)
      run: npm run lint

    - name: Run Commit Stage Tests (unit tests)
      run: npm run test:commit
                                
    - name: Tag Source Files For Release Candidate
      run: git tag -a "rc-${{ github.run_number }}" -m "Build tag for rc-${{ github.run_number }}"
      env:
        GITHUB_TOKEN: ${{ secrets.USER_TOKEN }}
        
    - name: Push Tags
      run: git push origin --tags
      env:
        GITHUB_TOKEN: ${{ secrets.USER_TOKEN }}

    - name: Upload Binaries As Artifact
      uses: actions/upload-artifact@v4
      with:
        name: rc-${{ github.run_number }}-binaries
        path: ./
  
  merge_to_main:
    needs: build_and_test
    concurrency:
      group: commit_stage

    runs-on: ubuntu-latest

    steps:
    - name: Verify PR mergeability
      run: |
         PR_NUMBER="${{ github.event.pull_request.number }}"
         GITHUB_TOKEN="${{ secrets.USER_TOKEN }}"
         API_URL="https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER"
         MERGEABLE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "$API_URL" | jq -r '.mergeable // empty')
         echo "Able to merge: $MERGEABLE"

         if [ "$MERGEABLE" = "null" ] || [ "$MERGEABLE" = "false" ]; then
           echo "PR $PR_NUMBER is not mergeable"
           exit 1
         fi

    - name: Merge to main trunk 
      run: |
        GITHUB_TOKEN="${{ secrets.USER_TOKEN }}"
        API_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/merge"
        Merge_Result=$(curl -s -X PUT -H "Authorization: Bearer $GITHUB_TOKEN" "$API_URL" | jq -r '.merged')
        echo "Merge result=$Merge_Result"

        if [ "$Merge_Result" = "true" ]; then
          echo "Merge to main successful!"
        else
          echo "Merge to main FAILED!"
          echo "Please make sure your branch is not out of sync and behind main"
          exit 1        
        fi
        
    - name: Delete the branch after merge 
      run: |        
        GITHUB_TOKEN="${{ secrets.USER_TOKEN }}"
        DELETE_BRANCH_API_URL="https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ github.head_ref }}"
        curl -X DELETE -s -H "Authorization: Bearer $GITHUB_TOKEN" "$DELETE_BRANCH_API_URL"
        
