name: Create Release

on:
  workflow_dispatch:
    inputs:
      artifact_name:
        description: 'Artifact name'
        required: true
permissions:
  contents: write

jobs:
  create_release:
    concurrency:
      group: create_release
    runs-on: ubuntu-latest
    steps:
    - name: Fetch Run ID For Artifact    
      id: fetch-runid
      run: |
        run_id=$(curl -s "https://api.github.com/repos/WoodyB/vending-machine-project/actions/artifacts?name=fester-honker" | jq -r '.artifacts[0].workflow_run.id')
        echo "run_id of workflow that produced the artifact is $run_id"
        echo "run_id=$run_id" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
    
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: fester-honker
        github-token: ${{ secrets.USER_TOKEN }}
        merge-multiple: false
        repository: WoodyB/vending-machine-project
        run-id: ${{ env.run_id }}
    
    - name: Get Access Token For Box
      run: |
        echo "Use Box API to get a fresh access token"
        fester_honker=$(cat fester-honker.txt)
        echo "::add-mask::$fester_honker"
                
        if [ -z "$fester_honker" ]; then
          echo "Error: fester-honker.txt is empty. Exiting."
          exit 1
        fi
        
        response=$(curl -s -i -X POST "https://api.box.com/oauth2/token" \
           -H "content-type: application/x-www-form-urlencoded" \
           -d "client_id=${{ secrets.BOX_CLIENT_ID }}" \
           -d "client_secret=${{ secrets.BOX_CLIENT_SECRET }}" \
           -d "refresh_token=$fester_honker" \
           -d "grant_type=refresh_token")

        http_status=$(echo "$response" | head -n 1 | awk '{print $2}')
                
        echo "http status from POST https://api.box.com/oauth2/token => $http_status"
        if [ "$http_status" -ge 400 ]; then
            echo "HTTP request failed with status code $http_status"
            echo "Response Body => $response"
            exit 1
        fi

        access_token=$(echo "$response" | grep -o '"access_token":"[^"]*' | sed 's/"access_token":"//')
        echo "::add-mask::$access_token"

        new_fester_honker=$(echo "$response" | grep -o '"refresh_token":"[^"]*' | sed 's/"refresh_token":"//')
        echo "::add-mask::$new_fester_honker"        
        
        echo "access_token=$access_token" >> $GITHUB_ENV
        echo "$new_fester_honker" > fester-honker.txt

        if [ -z "$access_token" ]; then
          echo "Error: access_token is empty. Exiting."
          exit 1
        fi
        
        if [ -z "$new_fester_honker" ]; then
          echo "Error: new_fester_honker is empty. Exiting."
          exit 1
        fi
                                
    - name: Delete Old Artifact   
      run: |
        artifact_id=$(curl -s -X GET \
          -H "Authorization: Bearer ${{ secrets.USER_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | \
          jq -r '.artifacts[] | select(.name == "fester-honker") | .id')
      
        curl -X DELETE \
          -H "Authorization: Bearer ${{ secrets.USER_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$artifact_id"    
               
    - name: TBD Verify Release Does Not Already Exist On Box
      run:  |
        release_list=$(curl -s -i -X GET "https://api.box.com/2.0/folders/250524193403/items" \
             -H "authorization: Bearer ${{ env.access_token }}")
      
        echo "Get List of Releases From Box"
        echo "$release_list"
        echo "TBD If Release Already Exists Then Exit With Error"
    
    - name: Get Run ID Of Workflow That Created The RC Artifact  
      run: |
        run_id=$(curl -s "https://api.github.com/repos/WoodyB/vending-machine-project/actions/artifacts?name=${{ inputs.artifact_name }}" | jq -r '.artifacts[0].workflow_run.id')
        echo "run_id of workflow that produced the artifact is $run_id"
        echo "run_id=$run_id" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
    
    - name: Download RC Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact_name }}
        github-token: ${{ secrets.USER_TOKEN }}
        merge-multiple: false
        repository: WoodyB/vending-machine-project
        run-id: ${{ env.run_id }}
        
    - name: Extract Version From RC Artifact
      run: |
        version=$(cat ./bin/app-data.js | grep 'version:' | sed -E 's/.*"([^"]+)".*/\1/')
        echo "Preparing version $version"
        echo "VERSION=$version" >> $GITHUB_ENV
    
    - name: Create Release Zip File For Box Upload
      run:  | 
        echo "Tarball ./bin and ./node_modules into VMP-Release-${{ env.VERSION }}.zip"
        tar -cvzf VMP-Release-${{ env.VERSION }}.zip ./bin ./node_modules

    - name: Show VMP-Release-${{ env.VERSION }}.zip Size
      run:  ls -lh *.zip

    - name: Upload VMP-Release-${{ env.VERSION }} To Box
      run: |
        # Forming the attributes JSON
        echo "{\"name\":\"VMP-Release-${{env.VERSION}}.zip\",\"parent\":{\"id\":\"250524193403\"}}" > attributes.json
        attributes=$(cat attributes.json)
        echo "attributes=$attributes"
        
        curl -s -i -X POST "https://upload.box.com/api/2.0/files/content" \
          -H "authorization: Bearer ${{ env.access_token }}" \
          -H "content-type: multipart/form-data" \
          -F attributes="$attributes" -F file=@VMP-Release-${{env.VERSION}}.zip
                  
    - name: Upload New Artifact
      uses: actions/upload-artifact@v4
      with:
        name: fester-honker
        path: fester-honker.txt
          
        
