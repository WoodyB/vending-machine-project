name: Create Release

on:
  workflow_dispatch:
    inputs:
      artifact_name:
        description: 'Artifact name'
        required: true

jobs:
  create_release:
    concurrency:
      group: create_release
    runs-on: ubuntu-latest
    steps:
    - name: Get Run ID Of Workflow That Created The RC Artifact  
      id: fetch-binaries
      run: |
        run_id=$(curl -s "https://api.github.com/repos/WoodyB/vending-machine-project/actions/artifacts?name=${{ inputs.artifact_name }}" | jq -r '.artifacts[0].workflow_run.id')
        echo "run_id of workflow that produced the artifact is $run_id"
        echo "run_id=$run_id" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
    
    - name: Download RC Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact_name }}
        github-token: ${{ secrets.USER_TOKEN }}
        merge-multiple: false
        repository: WoodyB/vending-machine-project
        run-id: ${{ env.run_id }}
        
    - name: Extract Version From Artifact
      run: |
        version=$(cat ./bin/app-data.js | grep 'version:' | sed -E 's/.*"([^"]+)".*/\1/')
        echo "Preparing version $version"
        echo "VERSION=$version" >> $GITHUB_ENV

    - name: Upload Release Artifact
      uses: actions/upload-artifact@v4
      with:
        name: VMP-Release-${{ env.VERSION }}
        path: |
          ./bin
          ./node_modules

    - name: Checkout Branch For GitHub Pages
      uses: actions/checkout@v4
      with:
        ref: gh-pages

    - name: Build List Of Releases
      run: |
        echo "Get List Of Artifacts To Build List Of Releases"
        release_artifacts=$(curl -s -X GET \
          -H "Authorization: Bearer ${{ secrets.USER_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | jq -c .)
        
        echo "Filter Artifacts For Release Artifacts" 
        filtered_artifacts=$(echo "$release_artifacts" | jq -r '.artifacts[] | select(.name | test("VMP-Release-[0-9]+\\.[0-9]+\\.[0-9]+"))')
        sorted_artifacts=$(echo "$filtered_artifacts" | jq -s 'sort_by(.name)')
        echo "$sorted_artifacts"

        echo "Build The New HTML Releases Page"    
        index_content="<!DOCTYPE html><html><head><title>Vending Machine Project Releases</title></head><body><h1>Vending Machine Project Releases</h1><div>"
        
        #while read -r artifact; do
        #  artifact_name=$(echo "$artifact" | jq -r '.name')
        #  artifact_url=$(echo "$artifact" | jq -r '.archive_download_url')
        #  index_content+="<p><a href=\"$artifact_url\">$artifact_name</a></p>"
        #done <<< $sorted_artifacts
        
        index_content+="<h2>Coming Soon .... I hope.</h2>"
        
        index_content+="</div></body></html>"
        echo "$index_content" > index.html
        
        cat index.html
        
    - name: Commit and push changes
      run: |
        git config user.name "${{ github.actor }}"
        git add index.html
        git commit -m "Update index.html with latest Vending Machine Project releases"
        git push origin gh-pages
