name: Create Release

on:
  workflow_dispatch:
    inputs:
      artifact_name:
        description: 'Artifact name'
        required: true

jobs:
  create_release:
    concurrency:
      group: create_release
    runs-on: ubuntu-latest
    steps:
    - name: Get Run ID Of Workflow That Created The RC Artifact  
      id: fetch-binaries
      run: |
        run_id=$(curl -s "https://api.github.com/repos/WoodyB/vending-machine-project/actions/artifacts?name=${{ inputs.artifact_name }}" | jq -r '.artifacts[0].workflow_run.id')
        echo "run_id of workflow that produced the artifact is $run_id"
        echo "run_id=$run_id" | tee -a $GITHUB_ENV $GITHUB_OUTPUT
    
    - name: Download RC Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact_name }}
        github-token: ${{ secrets.USER_TOKEN }}
        merge-multiple: false
        repository: WoodyB/vending-machine-project
        run-id: ${{ env.run_id }}
        
    - name: Extract Version From Artifact
      run: |
        version=$(cat ./bin/app-data.js | grep 'version:' | sed -E 's/.*"([^"]+)".*/\1/')
        echo "Preparing version $version"
        echo "VERSION=$version" >> $GITHUB_ENV

    #- name: Create Compressed Release
    #  run: |
    #    tar -czvf VMP-Release-${{ env.VERSION }}.tar.gz ./bin ./node_modules

    #- name: Debug See what we got
    #  run: ls -lh *.gz

    - name: Upload Release Artifact
      uses: actions/upload-artifact@v4
      with:
        name: VMP-Release-${{ env.VERSION }}
        path: |
          ./bin
          ./node_modules

      
    - name: Get List Of Release Artifacts To Build List Of Releases
      run: |
        release_artifacts=$(curl -s -X GET \
          -H "Authorization: Bearer ${{ secrets.USER_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/artifacts")
        echo "release_artifacts = $release_artifacts"  
        echo "RELEASE_ARTIFACTS=$release_artifacts" >> $GITHUB_ENV

    #- name: Checkout Branch For GitHub Pages
    #  uses: actions/checkout@v4
    #  with:
    #    ref: gh-pages

    #- name: Process Artifacts
    #  run: |
    #    json_response= ${{ env.RELEASE_ARTIFACTS }}
    #    echo "$json_response"

        # Parse JSON response and extract artifacts matching the pattern
    #    filtered_artifacts=$(echo "$json_response" | jq -r '.artifacts[] | select(.name | test("VMP-Release-[0-9]+\\.[0-9]+\\.[0-9]+"))')
    #    echo "$filtered_artifacts"

        # Sort artifacts by name (semantic versioning)
    #    sorted_artifacts=$(echo "${filtered_artifacts[@]}" | jq -s 'sort_by(.name)')
    #    echo "$sorted_artifacts"

        # Generate index.html content
    #    index_content="<h1>Vending Machine Project Releases</h1><div>"
    #    for artifact in $sorted_artifacts; do
    #      artifact_name=$(echo "$artifact" | jq -r '.name')
    #      artifact_url=$(echo "$artifact" | jq -r '.archive_download_url')
    #      index_content+="<p><a href=\"$artifact_url\">$artifact_name</a></p>"
    #    done
    #    index_content+="</div>"

        # Replace index.html content
    #    echo "<!DOCTYPE html><html><head><title>Vending Machine Project Releases</title></head><body>$index_content</body></html>" > index.html
    #    cat index.html

    #- name: Commit and push changes
    #  run: |
    #    git config --global user.email "actions@github.com"
    #    git config --global user.name "GitHub Actions"

    #    git add index.html
    #    git commit -m "Update index.html with latest Vending Machine Project releases"
    #    git push origin gh-pages    
